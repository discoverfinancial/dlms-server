/**
 * Copyright (c) 2024 Discover Financial Services
 */
import express, { Request, Response, NextFunction } from 'express';
import bodyParser from 'body-parser';
import cookieParser from 'cookie-parser';
import swaggerUi from 'swagger-ui-express';
import './controllers/index';
import { RegisterRoutes } from './routes';
import { User } from 'dlms-base';
import { Logger } from './logger';
import { ValidateError } from 'tsoa';
import { initProxy } from './proxy';
import { Config } from './config';
import { addOidcAuthMiddleware } from './authOidc';
import { addBasicAuthMiddleware } from './authBasic';
import { addNoAuthMiddleware } from './authNone';
import { UserProfileService } from './userProfileService';
import { DocMgr } from './docMgr';

export interface ServerArgs {
    addCustomRoutes?: (app: express.Application) => void;
    disabledAuthUser?: User;
    userProfileService?: UserProfileService;
}

export class Server {
    /**
     * Asynchronous call to instantiate server
     *
     * @param mgr - The document manager
     * @param args - Server arguments
     */
    public static async run(mgr: DocMgr, args?: ServerArgs) {
        const server = new Server();
        await server.run(mgr, args);
    }

    /** Default user (when auth is disabled) */
    private static defaultDisabledAuthUser = {
        id: 'johndoe',
        name: 'John Doe',
        roles: ['Employee'],
        department: 'Business Technology',
        email: 'johndoe@example.com',
        title: 'Programmer',
        employeeNumber: '1234D',
    };

    private cfg = new Config();
    private log = new Logger('app');
    private logHttpResponseBody = process.env.LOG_HTTP_RESPONSE_BODY;

    /**
     * Asynchronously run the server
     *
     * @param mgr - The document manager
     * @param args - Any server arguments
     */
    public async run(mgr: DocMgr, args?: ServerArgs) {
        args = args || {};
        initProxy();
        const app = express();
        app.set('json spaces', 2);
        // Add middleware
        app.use(this.logger.bind(this));
        app.use(this.allowCrossDomain.bind(this));
        app.use(express.urlencoded({ extended: false }));

        app.get(
            '/health',
            function (_req: express.Request, res: express.Response) {
                res.send('OK');
            }
        );

        app.use(cookieParser());
        if (this.cfg.oauthEnabled) {
            this.log.info('OAuth authentication is enabled');
            addOidcAuthMiddleware(app, this.cfg, mgr.getUserProfileService());
        } else {
            this.log.info('OAuth authentication is disabled');
            if (this.cfg.basicAuthEnabled) {
                addBasicAuthMiddleware(
                    app,
                    this.cfg,
                    mgr.getUserProfileService()
                );
            } else {
                addNoAuthMiddleware(
                    app,
                    args?.disabledAuthUser || Server.defaultDisabledAuthUser,
                    this.cfg
                );
            }
        }
        app.use(
            '/api/*',
            bodyParser.urlencoded({
                parameterLimit: 100000,
                limit: '200mb',
                extended: true,
            })
        );
        app.use('/api/*', bodyParser.json({ limit: '200mb' }));
        app.use('/api/swagger', swaggerUi.serve, this.serveSwagger.bind(this));
        // Register routes generated by tsoa from the controllers
        await RegisterRoutes(app);
        // Register any custom routes
        if (args.addCustomRoutes) {
            await args.addCustomRoutes(app);
        }
        app.use(this.handleError.bind(this));
        const port = parseInt(this.cfg.port);
        app.listen(port, () => {
            this.log.info(`Listening on port ${port}`);
        });
    }

    private trimString(string: string, length: number) {
        if (string.length > length) {
            return string.substring(0, length) + '...';
        }
        return string;
    }

    // Logger middleware
    private logger(req: Request, res: Response, next: NextFunction) {
        /* eslint-disable @typescript-eslint/no-this-alias*/
        const self = this;
        /* eslint-enable @typescript-eslint/no-this-alias*/
        const url = this.trimString(req.originalUrl, 100);
        self.log.info(`Received request: ${req.method} ${url}`);
        const oldWrite = res.write;
        const oldEnd = res.end;
        const chunks: any = [];
        let contentType: string | undefined;
        function handleChunk(chunk: any) {
            if (self.logHttpResponseBody && chunk) {
                if (!contentType) {
                    contentType = res.getHeader('content-type')?.toString();
                }
                if (!contentType?.startsWith('image')) {
                    chunks.push(self.convertChunk(chunk));
                }
            }
        }
        res.write = function (chunk: any, ...args) {
            handleChunk(chunk);
            return oldWrite.apply(res, [chunk, ...args] as any);
        };
        (res as any).end = function (chunk: any, ...args: any[]) {
            self.log.info(`Sent response: ${res.statusCode} ${url}`);
            handleChunk(chunk);
            if (chunks.length > 0) {
                const body = Buffer.concat(chunks).toString('utf8');
                self.log.debug(`Response body: ${body}`);
            }
            oldEnd.apply(res, [chunk, ...args] as any);
        };
        res.on('error', (err: any) => {
            self.log.warn(
                `Error from ${req.method} ${url}: ${JSON.stringify(err)}`
            );
        });
        next();
    }

    private convertChunk(chunk: any): any {
        if (typeof chunk === 'string') {
            chunk = Buffer.from(chunk, 'utf-8');
        }
        return chunk;
    }

    // Error handling middleware
    private handleError(
        err: any,
        req: Request,
        res: Response,
        next: NextFunction
    ) {
        /* eslint-disable @typescript-eslint/no-this-alias*/
        const self = this;
        /* eslint-enable @typescript-eslint/no-this-alias*/
        if (err instanceof ValidateError) {
            self.log.warn(
                `Caught validation error for ${req.path}: ${JSON.stringify(err.fields)}`
            );
            return res.status(422).json({
                code: 422,
                message: `Validation failed: ${JSON.stringify(err?.fields)}`,
            });
        }
        if (err) {
            const code = err.scode || 500;
            const message = err.msg || err.message;
            self.log.warn(
                `Caught error for ${req.path} (${code}): ${err.stack}`
            );
            return res.status(code).json({ code, message });
        }
        next();
    }

    // Cross-domain middleware
    private allowCrossDomain(_req: Request, res: Response, next: NextFunction) {
        res.header('Access-Control-Allow-Origin', this.cfg.corsOrigin);
        res.header('Access-Control-Allow-Methods', 'GET,PUT,POST,DELETE,PATCH');
        res.header('Access-Control-Allow-Headers', '*');
        res.header('Access-Control-Expose-Headers', '*');
        res.header('Access-Control-Allow-Credentials', 'true');
        res.header('Access-Control-Request-Headers', '*');
        next();
    }

    // Swagger middleware
    private async serveSwagger(_req: Request, res: Response) {
        return res.send(
            swaggerUi.generateHTML(await import('../build/swagger.json'))
        );
    }
}
